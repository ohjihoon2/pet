package com.pettoday.dao;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.ibatis.mapping.ParameterMapping;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.pettoday.vo.DirectVO;
import com.pettoday.vo.ItemBoardVO;
import com.pettoday.vo.ItemLikeVO;
import com.pettoday.vo.ItemVO;
import com.pettoday.vo.PurchasesVO;

@Repository
public class ItemDAO {

	@Autowired
	private SqlSessionTemplate sqlSession;
	
	private String namespace="mapper.item";
	
	/** 바로결제 페이지 상품리스트 **/
	public DirectVO getResultDirect(String sid){
		
		return sqlSession.selectOne(namespace + ".directlist", sid);
		
	}
	
	/** 바로결제 추가 **/
	public int getInsertDirect(DirectVO vo) {
		
		return sqlSession.insert(namespace + ".ins_direct",vo);
	}
	
	/***************** 장바구니 리스트 삭제 *****************/
	public void getResultListDelete(String sid) {
		sqlSession.delete(namespace + ".cartlistdelete", sid);
	}
	
	/** 상세결제정보 추가 **/
	public void getOrderDetailInsert(PurchasesVO vo) {
		sqlSession.insert(namespace + ".orddetailinsert", vo);
	}
	
	/** 결제정보 추가 **/
	public void getOrderInsert(PurchasesVO vo) {
		sqlSession.insert(namespace + ".orderinsert", vo);
	}
	
	
	/** 결제 페이지 상품리스트 **/
	public ArrayList<ItemLikeVO> getResultList(String sid){
		List<ItemLikeVO> list = null;
		
		list = sqlSession.selectList(namespace + ".orderlist", sid);
		
		return (ArrayList<ItemLikeVO>)list;
		
	}
	
	/** 관리자 고양이리스트 - row count행 출력 **/
	public int execTotalCatCount() {
		return sqlSession.selectOne(namespace + ".icount_admin_cat");
	}
	
	/** 관리자 고양이리스트 **/
	public ArrayList<ItemVO> getResultAdminCatList(int start, int end){
		List<ItemVO> list = null;
		
		Map<String, String> param = new HashMap<String, String>();
		param.put("start", String.valueOf(start));
		param.put("end", String.valueOf(end));
		
		list = sqlSession.selectList(namespace + ".admin_cat_list", param);
		
		return (ArrayList<ItemVO>)list;
	}
	
	
	/** 관리자 강아지리스트 삭제 **/
	public boolean getResultDogDelete(String item_no, HttpServletRequest request) {
		boolean result = false;
		String item_simg= sqlSession.selectOne(namespace+ ".del_item_simg",item_no);
		String item_sdescription= sqlSession.selectOne(namespace+ ".del_item_sdescription",item_no);
		int del_result = sqlSession.delete(namespace +".admin_dog_delete",item_no);
		
		if(del_result != 0) {
			result = true;
		}
		
		if(result) {
			//resultFile = bsfile;
			if(item_simg != null && item_simg != ""){
				//파일 생성 삭제
				String root_path = request.getSession().getServletContext().getRealPath("/");
				String attach_path = "\\resources\\upload\\";
				String delete_path = root_path + attach_path + item_simg;
				File file = new File(delete_path);
				
				if(file.exists()) {
					file.delete();
				}
			}
			
			if(item_sdescription != null && item_sdescription != ""){
				//파일 생성 삭제
				String root_path = request.getSession().getServletContext().getRealPath("/");
				String attach_path = "\\resources\\upload\\";
				String delete_path = root_path + attach_path + item_sdescription;
				File file = new File(delete_path);
				
				if(file.exists()) {
					file.delete();
				}
			}
		}
		
		return result;
	}
	
	/** 관리자 강아지리스트  수정 파일 없음 **/
	public boolean gerResultAdminDogUpdateNofile(ItemVO vo) {
		boolean result = false;
		int up_result = sqlSession.update(namespace + ".admin_dog_update_nofile",vo);
		if(up_result != 0) {
			result = true;
		}
		return result;
	}
	
	/** 관리자 강아지리스트 상품수정 **/
	public boolean gerResultAdminDogUpdate(ItemVO vo) {
		boolean result = false;
		int up_result = sqlSession.update(namespace + ".admin_dog_update", vo);
		if(up_result != 0) {
			result = true;
		}
		
		return result;
	}
	
	
	/** 관리자 강아지,고양이리스트 - 상세페이지 **/
	public ItemVO getResultAdminDogContent(String item_no) {
		return sqlSession.selectOne(namespace + ".admin_dog_content", item_no);
	}
	
	/** 관리자 강아지리스트 - 상품등록 **/
	public boolean getResultInsGood(ItemVO vo) {
		boolean result = false;
		int ins_result = sqlSession.insert(namespace + ".ins_good", vo);
		if(ins_result != 0) {
			result = true;
		}
		return result;
	}
	
	
	/** 관리자 강아지리스트 - row count행 출력 **/
	public int execTotalDogCount() {
		return sqlSession.selectOne(namespace + ".icount_admin_dog");
	}
	
	/** 관리자 강아지리스트 **/
	public ArrayList<ItemVO> getResultAdminDogList(int start, int end){
		List<ItemVO> list = null;
		
		Map<String, String> param = new HashMap<String, String>();
		param.put("start", String.valueOf(start));
		param.put("end", String.valueOf(end));
		
		list = sqlSession.selectList(namespace + ".admin_dog_list", param);
		
		return (ArrayList<ItemVO>)list;
	}
	
	
	
	/** 아이템 상세페이지_게시판삭제 **/
	public boolean getResultDelete(String ITEM_BOARD_NO) {
		boolean result = false;
		int del_result = sqlSession.update(namespace + ".delete",ITEM_BOARD_NO);
		if(del_result != 0) {
			result = true;
		}
		return result;
	}
	
	/** 아이템 상세페이지_게시판수정 **/
	public boolean getResultUpdate(ItemBoardVO vo) {
		boolean result = false;
		int up_result = sqlSession.update(namespace + ".update",vo);
		if(up_result != 0) {
			result = true;
		}
		return result;
	}
	
	/** 아이템 상세페이지_게시판 조회수 업데이트 **/
	public void getResultReviewUpdateHits(String ITEM_BOARD_NO) {
		sqlSession.update(namespace + ".review_hits_update",ITEM_BOARD_NO);
	}
	
	/** 아이템 상세페이지_게시판내용 **/
	public ItemBoardVO getResultContent(String ITEM_BOARD_NO) {
		return sqlSession.selectOne(namespace + ".content", ITEM_BOARD_NO);
	}
	
	/** 아이템 상세페이지_게시판 리스트 **/
	public ArrayList<ItemBoardVO> getBoardResultList(int start, int end, String iid){
		List<ItemBoardVO> list = null;
		
		Map<String, String> param = new HashMap<String, String>();
		param.put("start", String.valueOf(start));
		param.put("end", String.valueOf(end));
		param.put("iid", iid);
		
		list = sqlSession.selectList(namespace + ".boardlist", param);
		
		return (ArrayList<ItemBoardVO>)list;
	}
	
	/** 아이템상세페이지_게시판 - row count행 출력 **/
	public int execTotalBoardCount(String iid) {
		return sqlSession.selectOne(namespace + ".icount_item_board",iid);
	}
	
	/** 아이템 상세페이지_글쓰기 완료 **/
	public boolean getResultWrite(ItemBoardVO vo) {
		boolean result = false;
		int ins_result = sqlSession.insert(namespace + ".write", vo);
		if(ins_result != 0) {
			result = true;
		}
		
		return result;
	}
	
	/** 아이템 상세페이지_찜하기유지 **/
	public int getResultLike(String sid, String iid) {
		Map<String, String> param = new HashMap<String, String>();
		param.put("sid", sid);
		param.put("iid", iid);
		System.out.println("찜하기 유지="+sid+","+iid);
		
		return sqlSession.selectOne(namespace + ".item_like_keep",param);
		
	}
	
	/** 아이템 상세페이지_찜하기삭제 **/
	public boolean getItemDelLike(String sid, String iid) {
		boolean result=false;
		Map<String, String> param = new HashMap<String, String>();
		param.put("sid", sid);
		param.put("iid", iid);
		
		int ins_item_like = sqlSession.delete(namespace + ".item_like_del",param);
		if(ins_item_like != 0) {
			result = true;
		}
		
		return result;
	}
	
	/** 아이템 상세페이지_찜하기 **/
	public boolean getItemLike(String sid, String iid) {
		boolean result=false;
		Map<String, String> param = new HashMap<String, String>();
		param.put("sid", sid);
		param.put("iid", iid);
		
		int ins_item_like = sqlSession.insert(namespace + ".item_like",param);
		if(ins_item_like != 0) {
			result = true;
		}
		
		return result;
	}
	
	/** 아이템 상세페이지 조회수 업데이트 **/
	public void getResultItemUpdateHits(String iid) {
		sqlSession.update(namespace + ".item_hits_update",iid);
	}
	
	/** 아이템 상세페이지 **/
	public ItemVO getResultItemDetail(String iid) {
		return sqlSession.selectOne(namespace+".detailList",iid);
	}
	
	
	/** 세부카테고리 리스트 - row count행 출력 **/
	public int execTotalCount2(String[] chkList,String item_value2_cate) {
	
		Map<String, String> param = new HashMap<String, String>();
		/*	for(int i=0; i<chkList.length; i++) {
				param.put("item"+(i+1), chkList[i]);
				//System.out.println("item="+chkList[i]);
			}*/
			
			for(int i=0; i<chkList.length; i++) {
				if(i==0) {
					param.put("p_cate",chkList[0]);
				}else if(i==1) {
					param.put("p_brand",chkList[1]);
				}else if(i==2) {
					param.put("p_feature",chkList[2]);
				}else if(i==3) {
					param.put("p_material",chkList[3]);
				}
			}
			
			param.put("item_value2_cate", item_value2_cate);
			/*for(int i=0; i<chkList.length; i--) {
				param.put("item"+(i+1), chkList[i]);
				System.out.println("item="+chkList[i]);*/
	
		
		return sqlSession.selectOne(namespace + ".icount_item_detail",param);
	}
	
	/** 카테고리 리스트 - row count행 출력 **/
	public int execTotalCount(String item_cate) {
		return sqlSession.selectOne(namespace + ".icount_item_category",item_cate);
	}
	
	/** 전체 리스트 - row count행 출력 **/
	public int execTotalCount() {
		return sqlSession.selectOne(namespace + ".icount");
	}
	
	
	/** 세부카테고리 전체 리스트, 인기순,최신순,낮은가격순,높은가격순 **/
	public ArrayList<ItemVO> getCateDetailResultList(int start, int end,String[] chkList,String item_value2_cate,String item_sequence){
		
		
		List<ItemVO> list = null;
		Map<String, String> param = new HashMap<String, String>();
		
		for(int i=0; i<chkList.length; i++) {
			if(i==0) {
				param.put("p_cate",chkList[0]);
			}else if(i==1) {
				param.put("p_brand",chkList[1]);
			}else if(i==2) {
				param.put("p_feature",chkList[2]);
			}else if(i==3) {
				param.put("p_material",chkList[3]);
			}
		}
		
		/*System.out.println(param.get("p_cate"));
		System.out.println(param.get("p_brand"));
		System.out.println(param.get("p_feature"));
		System.out.println(param.get("p_material"));
		System.out.println(param.get("p_sequence"));*/
		//param.put("array",chkList); //객체로 받아오기 때문에 Map<String,Object> 해줘야 됨
		param.put("start", String.valueOf(start));
		param.put("end", String.valueOf(end));
		param.put("item_value2_cate", item_value2_cate);
		param.put("item_sequence", item_sequence);
		 
	
		list = sqlSession.selectList(namespace + ".cate_detail_list", param);
		
		return (ArrayList<ItemVO>)list;
	}
		
	
	/** 카테고리별 전체 리스트 **/
	public ArrayList<ItemVO> getCateResultList(int start, int end, String item_cate, String item_sequence){
		List<ItemVO> list = null;
		
		Map<String, String> param = new HashMap<String, String>();
		param.put("start", String.valueOf(start));
		param.put("end", String.valueOf(end));
		param.put("item_cate", item_cate);
		param.put("item_sequence", item_sequence);
		
		list = sqlSession.selectList(namespace + ".cate_list", param);
		
		return (ArrayList<ItemVO>)list;
		
	}
	
	
	/** 전체 리스트 **/
	/*public ArrayList<ItemVO> getResultList(int start, int end){
		List<ItemVO> list = null;
		
		Map<String, String> param = new HashMap<String, String>();
		param.put("start", String.valueOf(start));
		param.put("end", String.valueOf(end));
		
		list = sqlSession.selectList(namespace + ".list", param);
		
		return (ArrayList<ItemVO>)list;
		
	}*/
	
	/** 전체 리스트 **/
	public ArrayList<ItemVO> getResultList(int start, int end,String item_sequence){
		List<ItemVO> list = null;
		
		Map<String, String> param = new HashMap<String, String>();
		param.put("start", String.valueOf(start));
		param.put("end", String.valueOf(end));
		param.put("item_sequence", item_sequence);
		
		list = sqlSession.selectList(namespace + ".llist", param);
		
		return (ArrayList<ItemVO>)list;
		
	}
	
	/** 추천상품 리스트 **/
	public ArrayList<ItemVO> getGoodList(){
		List<ItemVO> list = null;
		list = sqlSession.selectList(namespace + ".goodlist");
		
		return (ArrayList<ItemVO>)list;
		
	}
	/** 강아지추천상품 리스트 **/
	public ArrayList<ItemVO> getDogGoodList(){
		List<ItemVO> list = null;
		list = sqlSession.selectList(namespace + ".doggoodlist");
		
		return (ArrayList<ItemVO>)list;
		
	}
	/** 강아지최근등록상품 리스트 **/
	public ArrayList<ItemVO> getRecentList(){
		List<ItemVO> list = null;
		list = sqlSession.selectList(namespace + ".recentlist");
		
		return (ArrayList<ItemVO>)list;
		
	}
	/** 고양이추천상품 리스트 **/
	public ArrayList<ItemVO> getCatGoodList(){
		List<ItemVO> list = null;
		
		list = sqlSession.selectList(namespace + ".catgoodlist");
		
		return (ArrayList<ItemVO>)list;
		
	}
	/** 고양이최근등록상품 리스트 **/
	public ArrayList<ItemVO> getRecentCatList(){
		List<ItemVO> list = null;
		list = sqlSession.selectList(namespace + ".recentcatlist");
		
		return (ArrayList<ItemVO>)list;
		
	}
	/** 최근 본 상품 리스트 **/
	public ArrayList<ItemVO> getNearList(String mem_id){
		List<ItemVO> list = null;
		list = sqlSession.selectList(namespace + ".neargoodlist",mem_id);
		
		return (ArrayList<ItemVO>)list;
		
	}
	/** 추천(강아지) 상품 리스트 **/
	public ArrayList<ItemVO> getRecommandList(String meat,String feature,String feel){
		List<ItemVO> list = null;
		System.out.println(meat);
		System.out.println(feature);
		System.out.println(feel);
		Map<String, String> param = new HashMap<String, String>();
		param.put("meat", meat);
		param.put("feature", feature);
		param.put("feel", feel);
		
		
		list = sqlSession.selectList(namespace + ".recommend",param);
		
		return (ArrayList<ItemVO>)list;
		
	}
	/** 추천(고양이) 상품 리스트 **/
	public ArrayList<ItemVO> getCatRecommandList(String meat,String feature,String feel){
		List<ItemVO> list = null;
		System.out.println(meat);
		System.out.println(feature);
		System.out.println(feel);
		Map<String, String> param = new HashMap<String, String>();
		param.put("meat", meat);
		param.put("feature", feature);
		param.put("feel", feel);
		
		
		list = sqlSession.selectList(namespace + ".catrecommend",param);
		
		return (ArrayList<ItemVO>)list;
		
	}
	
	
	/** 최근 본 아이템 **/
	public void getReadItem(String item_no) {
		sqlSession.insert(namespace+".nearinsert",item_no);
	}
	
}
