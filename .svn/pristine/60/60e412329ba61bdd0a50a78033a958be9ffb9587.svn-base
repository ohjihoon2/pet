package com.myspring.controller;

import java.io.File;
import java.util.ArrayList;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.pettoday.dao.WalktogetherDAO;
import com.pettoday.vo.PhotocontestVO;
import com.pettoday.vo.WalktogetherReplyVO;
import com.pettoday.vo.WalktogetherVO;

@Controller
public class WalktogetherController {
	
	@Autowired
	private WalktogetherDAO walktogetherDao;

	/**
	 * 친구와 산책 컨트롤러
	 */
	@RequestMapping(value = "/walktogether.do", method = RequestMethod.GET)
	public ModelAndView walktogether(String rpage) {
		ModelAndView mv = new ModelAndView();
		
		// 페이징 처리 - startCount, endCount 구하기
				int startCount = 0;
				int endCount = 0;
				int pageSize = 8; // 한페이지당 게시물 수
				int reqPage = 1; // 요청페이지
				int pageCount = 1; // 전체 페이지 수
				int dbCount = walktogetherDao.execTotalCount(); // DB에서 가져온 전체 행수

				// 총 페이지 수 계산
				if (dbCount % pageSize == 0) {
					pageCount = dbCount / pageSize;
				} else {
					pageCount = dbCount / pageSize + 1;
				}

				// 요청 페이지 계산
				if (rpage != null) {
					reqPage = Integer.parseInt(rpage);
					startCount = (reqPage - 1) * pageSize + 1;
					endCount = reqPage * pageSize;
				} else { // 가장 처음 페이지 즉, 1번페이지가 나온다.
					startCount = 1;
					endCount = 8;
				}

				ArrayList<WalktogetherVO> list = walktogetherDao.getResultList(startCount, endCount);

				mv.addObject("list", list);
				mv.addObject("dbCount", dbCount);
				mv.addObject("rpage", rpage);
				mv.addObject("pageSize", pageSize);
				mv.setViewName("/walktogether/walktogether.user");

				return mv;
	}
	
	
	
	/**
	 * 친구와 산책 ajax
	 */
	@RequestMapping(value = "/walktogether_ajax.do",   method = RequestMethod.GET , produces = "application/text; charset=utf8")
	@ResponseBody
	public String walktogether_ajax(String rpage, String category, String search) {
		System.out.println("search="+ search);
		//System.out.println("category = "+category);

		// 페이징 처리 - startCount, endCount 구하기
		int startCount = 0;
		int endCount = 0;
		int pageSize =6; // 한페이지당 게시물 수
		int reqPage = 1; // 요청페이지
		int pageCount = 1; // 전체 페이지 수
		int dbCount = walktogetherDao.execTotalCount(category, search); // DB에서 가져온 전체 행수
		//System.out.println("dbCount = "+dbCount);

		// 총 페이지 수 계산
		if (dbCount % pageSize == 0) {
			pageCount = dbCount / pageSize;
		} else {
			pageCount = dbCount / pageSize + 1;
		}

		// 요청 페이지 계산
		if (rpage != null) {
			reqPage = Integer.parseInt(rpage);
			startCount = (reqPage - 1) * pageSize + 1;
			endCount = reqPage * pageSize;
		} else { // 가장 처음 페이지 즉, 1번페이지가 나온다.
			startCount = 1;
			endCount = 6;
		}

		ArrayList<WalktogetherVO> list = walktogetherDao.getResultList(startCount, endCount, category, search);
		
		Gson gson = new Gson();
		JsonArray jlist = new JsonArray();
		JsonObject jdata = new JsonObject();
	
	    
		for(WalktogetherVO vo: list){
			JsonObject obj = new JsonObject();
			obj.addProperty("wal_no", vo.getWal_no());
			obj.addProperty("wal_sfile", vo.getWal_sfile());
			obj.addProperty("wal_name", vo.getWal_name());
			obj.addProperty("wal_dog", vo.getWal_dog());
			obj.addProperty("wal_address", vo.getWal_address());
			obj.addProperty("wal_favorite", vo.getWal_favorite());
			obj.addProperty("wal_date", vo.getWal_date());
			obj.addProperty("wal_hits", vo.getWal_hits());
			
			jlist.add(obj);
		}	 

		jdata.add("list",jlist);
		jdata.addProperty("dbcount", String.valueOf(dbCount));
		jdata.addProperty("rpage", reqPage);
		jdata.addProperty("pagesize", pageSize);
		
		
		System.out.println("jdate=" + jdata);	
		
		return String.valueOf(gson.toJson(jdata));
	}
	
	/**
	 * 친구와 산책 검색
	 */
	/*@RequestMapping(value = "/walktogether_search.do", method = RequestMethod.POST)
	public ModelAndView walktogether_search(String rpage, String search) {
		ModelAndView mv = new ModelAndView();
		System.out.println("search="+ search);
		
		// 페이징 처리 - startCount, endCount 구하기
				int startCount = 0;
				int endCount = 0;
				int pageSize = 8; // 한페이지당 게시물 수
				int reqPage = 1; // 요청페이지
				int pageCount = 1; // 전체 페이지 수
				int dbCount = walktogetherDao.execTotalCount(); // DB에서 가져온 전체 행수

				// 총 페이지 수 계산
				if (dbCount % pageSize == 0) {
					pageCount = dbCount / pageSize;
				} else {
					pageCount = dbCount / pageSize + 1;
				}

				// 요청 페이지 계산
				if (rpage != null) {
					reqPage = Integer.parseInt(rpage);
					startCount = (reqPage - 1) * pageSize + 1;
					endCount = reqPage * pageSize;
				} else { // 가장 처음 페이지 즉, 1번페이지가 나온다.
					startCount = 1;
					endCount = 8;
				}

				ArrayList<WalktogetherVO> list = walktogetherDao.getResultListSearch(startCount, endCount, search);
				System.out.println("listsearch="+ list);
				mv.addObject("list", list);
				mv.addObject("dbCount", dbCount);
				mv.addObject("rpage", rpage);
				mv.addObject("pageSize", pageSize);
				mv.setViewName("/walktogether/walktogether.user");

				return mv;
	}*/
	
	/**
	 * 친구와 산책 상세 컨트롤러
	 */
	@RequestMapping(value = "/walktogether_content.do", method = RequestMethod.GET, produces="text/plain;charset=UTF-8")
	public ModelAndView walktogether_content(String wal_no, String page) {
		ModelAndView mv = new ModelAndView();
		System.out.println("wal_no(cont) = "+ wal_no);

		WalktogetherVO vo = walktogetherDao.getResultContent(wal_no);
		/*ArrayList<WalktogetherReplyVO> list = walktogetherDao.getResultReplyList();*/

		if (vo.getWal_name() != "" && vo.getWal_name() != null) {

			walktogetherDao.getResultUpdatehits(wal_no);

			if (vo.getWal_content() != "" && vo.getWal_content() != null) {

				mv.addObject("vo", vo);
				/*mv.addObject("list",list);*/
				mv.addObject("rpage", page);
				// mv.addObject("rlist", rlist);
				mv.setViewName("/walktogether/walktogether_content.user");
				
				
			} else {
				vo.setWal_content("");
			}

		} else {
			mv.setViewName("errorPage");
		}

		return mv;
	}
	
	/**
	 * 친구와 산책 글쓰기 컨트롤러
	 */
	@RequestMapping(value = "/walktogether_write.do", method = RequestMethod.GET)
	public String walktogether_write(String sid) {
		String regPage = "";
		if(sid != null && sid != "") {
			regPage= "/walktogether/walktogether_write.user";
		}else {
			regPage= "/member/login.user";
		}
		return regPage;
	}
	
	@RequestMapping(value = "/walktogether_write_proc.do", method = RequestMethod.POST)
	public String walktogether_write_proc(WalktogetherVO vo, HttpServletRequest request) throws Exception{
		String root_path = "", attach_path = "", wal_sfile = "";
		
		if (vo.getWal_cfile().getOriginalFilename() != null && vo.getWal_cfile().getOriginalFilename() != "") {
			root_path = request.getSession().getServletContext().getRealPath("/");
			attach_path = "\\resources\\upload\\";

			UUID uuid = UUID.randomUUID();
			String wal_file = vo.getWal_cfile().getOriginalFilename();
			wal_sfile = uuid + "_" + vo.getWal_cfile().getOriginalFilename();

			vo.setWal_file(wal_file);
			vo.setWal_sfile(wal_sfile);
		}else {
			vo.setWal_sfile("");
			vo.setWal_file("");
		}
		
		boolean result = walktogetherDao.getResultWrite(vo);
		String resPage = "";
		
		if(result) {
			if(vo.getWal_cfile().getOriginalFilename() != null && vo.getWal_cfile().getOriginalFilename() != "") {
				String upload_path = root_path+attach_path+wal_sfile;
				
				File file = new File(upload_path);
				vo.getWal_cfile().transferTo(file);
			}
			
			resPage = "redirect:/walktogether.do";
		}else {
			resPage = "errorPage";
		}

		return resPage;
	}
	
	/**
	 * 친구와 산책 삭제
	 */
	@RequestMapping(value = "/walktogether_delete.do", method = RequestMethod.GET)
	public ModelAndView walktogether_delete(String wal_no) {
		ModelAndView mv = new ModelAndView();
		
		mv.addObject("wal_no", wal_no);
		mv.setViewName("/walktogether/walktogether_delete.user");
		
		return mv;
	}
	
	@RequestMapping(value="/walktogether_delete_proc.do", method = RequestMethod.GET)
	public ModelAndView walktogether_delete_proc(String wal_no, HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		
		boolean result = walktogetherDao.getResultDelete(wal_no, request);
		
		if(result) {
			mv.setViewName("redirect:/walktogether.do");
		}else {
			mv.setViewName("errorPage");	
		}

		return mv;
	}
	
	/**
	 * 친구와 산책 수정
	 */
	@RequestMapping(value = "/walktogether_update.do", method = RequestMethod.GET)
	public ModelAndView walktogether_update(String wal_no) {
		ModelAndView mv = new ModelAndView();

		//BoardCheckService board = new BoardCheckService();
		WalktogetherVO vo = walktogetherDao.getResultContent(wal_no);

		mv.addObject("vo", vo);
		mv.setViewName("/walktogether/walktogether_update.user");

		return mv;
	}
	
	/**
	 * 사진대회 수정 완료 처리
	 */
	@RequestMapping(value = "/walktogether_update_proc.do", method = RequestMethod.POST)
	public ModelAndView walktogether_update_proc(WalktogetherVO vo, HttpServletRequest request, String del_wal_sfile) throws Exception {
		// System.out.println("del_bsfile : " + del_bsfile);
		ModelAndView mv = new ModelAndView();

		//BoardCheckService board = new BoardCheckService();
		boolean result = false;

		if (vo.getWal_cfile().getOriginalFilename() != null && vo.getWal_cfile().getOriginalFilename() != "") {
			//System.out.println("파일 있음");

			String root_path = request.getSession().getServletContext().getRealPath("/");
			String attach_path = "\\resources\\upload\\";

			// 중복방지 처리
			UUID uuid = UUID.randomUUID();
			String wal_file = vo.getWal_cfile().getOriginalFilename();
			String wal_sfile = uuid + "_" + vo.getWal_cfile().getOriginalFilename();

			// System.out.println("ubfile=" + bfile);
			// System.out.println("ubsfile=" + bsfile);

			// db연동을 위한 파일명 set
			vo.setWal_file(wal_file);
			vo.setWal_sfile(wal_sfile);
			result = walktogetherDao.getResultUpdate(vo); // 전체데이터 업데이트

			if (result) {
				// 업로드폴더에 파일 저장
				String upload_path = root_path + attach_path + wal_sfile;

				File file = new File(upload_path);
				vo.getWal_cfile().transferTo(file);

				// 기존 파일 삭제
				if (del_wal_sfile != null && del_wal_sfile != "") {
					String del_path = root_path + attach_path + del_wal_sfile;
					File delFile = new File(del_path);
					if (delFile.exists())
						delFile.delete();
				}
			}
		}/* else {
			// 타이틀, 내용만 업데이트
			System.out.println("파일 없음");
			result = photocontestDao.getResultUpdateNofile(vo);// 타이틀,내용만
		}*/

		if (result) {
			mv.setViewName("redirect:/walktogether.do"); // if(result) mv.setViewName("/board/board_list"); ------------->
		} // 이렇게 자주 하는데 null포인트가 뜬다 board.do부분
			// 컨트롤러에서 만든 arraylist같은것이 실행이 안되서
			// 그렇다 그래서 다시 board.do부분 컨트롤러를 호출해야된다

		return mv;
	}
	
	/**
	 * 친구와 산책 댓글
	 */
	@RequestMapping(value = "/walktogether_reply_write_proc.do", method = RequestMethod.POST, produces="text/plain;charset=UTF-8")
	public String walktogether_reply_write_proc(WalktogetherReplyVO vo) {
		boolean result = walktogetherDao.getResultReplyContent(vo);
		String resPage = "";
		System.out.println(vo.getWal_no());
		
		/*if(result) {
			resPage = "redirect:/walktogether_content.do?wal_no";
		}else {
			resPage = "errorPage";
		}
*/
		return "redirect:/walktogether_content.do?wal_no="+vo.getWal_no()+"&page=1";
	}
	
	/**
	 * 친구와 산책 댓글 ajax
	 */
	@RequestMapping(value="/walktogether_reply_ajax.do", method = RequestMethod.GET, produces="text/plain;charset=UTF-8")
	@ResponseBody
	public String walktogether_reply_ajax(String wal_no) {
		System.out.println("wal_no(con)="+wal_no);
		ArrayList<WalktogetherReplyVO> list = walktogetherDao.getResultReplyList(wal_no);
		
		Gson gson = new Gson();
		JsonArray jlist = new JsonArray();
		JsonObject jdata = new JsonObject();
		
		for(WalktogetherReplyVO vo: list){
			JsonObject obj = new JsonObject();
			obj.addProperty("wal_reply_no", vo.getWal_reply_no());
			obj.addProperty("wal_reply_content", vo.getWal_reply_content());
			obj.addProperty("wal_reply_date", vo.getWal_reply_date());
			obj.addProperty("wal_no", vo.getWal_no());
			obj.addProperty("mem_id", vo.getMem_id());
			
			jlist.add(obj);
		}	 

		jdata.add("list",jlist);
		
		return String.valueOf(gson.toJson(jdata));
	}
}
