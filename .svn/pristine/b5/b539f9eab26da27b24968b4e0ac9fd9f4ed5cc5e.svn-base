package com.myspring.controller;

import java.io.File;  
import java.util.ArrayList;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;


import com.pettoday.dao.ItemDAO;
import com.pettoday.dao.NoticeDAO;
import com.pettoday.dao.VetDAO;
import com.pettoday.dao.memberDAO;
import com.pettoday.vo.ItemVO;
import com.pettoday.vo.JoinVO;
import com.pettoday.vo.NoticeVO;
import com.pettoday.vo.VetVO;

@Controller
public class AdminController {
	
	@Autowired
	private ItemDAO itemDao;
	@Autowired
	private VetDAO vetDao;
	@Autowired
	private memberDAO memberDao;
	@Autowired
	private NoticeDAO noticeDao;
	
	
	/**
	 * 메인 컨트롤러
	 */
	@RequestMapping(value = "/admin_main.do", method = RequestMethod.GET)
	public ModelAndView index() {
		ModelAndView mv = new ModelAndView();
		ArrayList<ItemVO> list =itemDao.getRecentList();
		ArrayList<ItemVO> list2 =itemDao.getRecentCatList();
		ArrayList<JoinVO> list3 = memberDao.getAdminMemList();
		ArrayList<NoticeVO> list4 = noticeDao.getMainResultList();
		
		
		mv.addObject("list",list);
		mv.addObject("list2",list2);
		mv.addObject("list3", list3);
		mv.addObject("list4", list4);
		mv.setViewName("admin/admin_main.none");
		return mv;
	}

	@RequestMapping(value = "/admin_dog_item.do", method = RequestMethod.GET)
	public String admin_dog_item() {
		return "admin/admin_dog_item.none";
	}
	@RequestMapping(value = "/admin_cat_item.do", method = RequestMethod.GET)
	public String admin_cat_item() {
		return "admin/admin_cat_item.none";
	}
	@RequestMapping(value = "/admin_notice.do", method = RequestMethod.GET)
	public ModelAndView admin_notice(String rpage) {
		ModelAndView mv = new ModelAndView();

		// 페이징 처리 - startCount, endCount 구하기
		int startCount = 0;
		int endCount = 0;
		int pageSize = 5; // 한페이지당 게시물 수
		int reqPage = 0; // 요청페이지
		int pageCount = 1; // 전체 페이지 수
		int dbCount = noticeDao.execTotalCount(); // DB에서 가져온 전체 행수
		
		// 총 페이지 수 계산
		if (dbCount % pageSize == 0) {
			pageCount = dbCount / pageSize;
		} else {
			pageCount = dbCount / pageSize + 1;
		}

		// 요청 페이지 계산
		if (rpage != null) {
			reqPage = Integer.parseInt(rpage);
			startCount = (reqPage - 1) * pageSize + 1;
			endCount = reqPage * pageSize;
		} else { // 가장 처음 페이지 즉, 1번페이지가 나온다.
			reqPage = 1; 
			startCount = 1;
			endCount = 5;
		}

		ArrayList<NoticeVO> list = noticeDao.getResultList(startCount, endCount);
		
	

		mv.addObject("list", list);
		mv.addObject("dbCount", dbCount);
		mv.addObject("rpage", reqPage);
		mv.addObject("pageSize", pageSize);
	
		mv.setViewName("/admin/admin_notice.none");

		return mv;
	}
	
	@RequestMapping(value = "/admin_notice_write.do", method = RequestMethod.GET)
	public String admin_notice_write() {
		return "admin/admin_notice_write.none";
	}
	@RequestMapping(value = "/admin_notice_write_proc.do", method = RequestMethod.POST)
	public String admin_notice_write_proc(NoticeVO vo,HttpServletRequest request) throws Exception{
	
		String not_sfile = "";
	
		
		
		boolean result =  noticeDao.getResultWrite(vo);
		String respage="";
		
		if(result){
			
			
			respage = "redirect:/admin_notice.do";
		}else{
			respage = "errorPage";
		}
		
		return respage;
	}
	@RequestMapping(value = "/admin_notice_content.do", method = RequestMethod.GET)
	public ModelAndView admin_notice_content(String not_no) {
		ModelAndView mv = new ModelAndView();
		
		
		NoticeVO vo = noticeDao.getResultContent(not_no);
		
		if(vo.getNot_title() != null && vo.getNot_title() != ""){
			vo.setNot_content(vo.getNot_content().replace("\r\n", "<br>"));
			mv.addObject("vo",vo);
			mv.setViewName("/admin/admin_notice_content.none");
		}else{
			mv.setViewName("errorPage");
		}
		return mv;
		
	}
	

	@RequestMapping(value = "/admin_notice_update.do", method = RequestMethod.GET)
	public ModelAndView admin_notice_update(String not_no,String page) {
		ModelAndView mv = new ModelAndView();
		
		NoticeVO vo =noticeDao.getResultContent(not_no);
		
		if(vo.getNot_title() != null && vo.getNot_title() != ""){
		
			
			if(vo.getNot_content() != null && vo.getNot_content() != ""){
				vo.setNot_content(vo.getNot_content().replace("\r\n", "<br>"));
			
				
			
				mv.addObject("vo",vo);
				mv.addObject("rpage",page);
				mv.setViewName("/admin/admin_notice_update.none");
			}else{
				vo.setNot_content("");
			}
			
		}else{
			mv.setViewName("errorPage");
		}
		return mv;
	}
	@RequestMapping(value="/admin_notice_update_proc.do", method=RequestMethod.POST)
	public ModelAndView admin_notice_update_proc(NoticeVO vo, HttpServletRequest request) throws Exception {
		
		ModelAndView mv = new ModelAndView();
		
	
		boolean result = false;
		
		
		result = noticeDao.getResultUpdate(vo);	//타이틀, 내용업데이트
	
		if(result) mv.setViewName("redirect:/admin_notice.do");
		
		return mv;
	}
	@RequestMapping(value = "/admin_notice_delete.do", method = RequestMethod.GET)
	public ModelAndView admin_notice_delete(String not_no) {
		ModelAndView mv = new ModelAndView();
		
		mv.addObject("not_no",not_no);
		mv.setViewName("/admin/admin_notice_delete.none");
		
		return mv;
	}
	
	/**
	 * title : 삭제완료 처리
	 */
	@RequestMapping(value="/admin_notice_delete_proc.do", method=RequestMethod.GET)
	public ModelAndView admin_notice_delete_proc(String not_no,HttpServletRequest request) {
		
		ModelAndView mv = new ModelAndView();
		boolean result = false;
		result = noticeDao.getResultDelete(not_no);
		
		
		
		if(result){
			mv.setViewName("redirect:/admin_notice.do");
		}else{
			mv.setViewName("errorPage");
		}
		
		return mv;
	}
	
	
	
	@RequestMapping(value = "/admin_question.do", method = RequestMethod.GET)
	public String admin_question() {
		return "admin/admin_question.none";
	}
	
	@RequestMapping(value = "/admin_vet_counsel.do", method = RequestMethod.GET)
	public String admin_vet_counsel() {
		return "admin/admin_vet_counsel.none";
	}
	@RequestMapping(value = "/admin_dog_vet.do", method = RequestMethod.GET)
	public ModelAndView admin_dog_vet(String rpage) {
		ModelAndView mv = new ModelAndView();

		// 페이징 처리 - startCount, endCount 구하기
		int startCount = 0;
		int endCount = 0;
		int pageSize = 6; // 한페이지당 게시물 수
		int reqPage = 0; // 요청페이지
		int pageCount = 1; // 전체 페이지 수
		int dbCount = vetDao.execTotalCount(); // DB에서 가져온 전체 행수
		
		// 총 페이지 수 계산
		if (dbCount % pageSize == 0) {
			pageCount = dbCount / pageSize;
		} else {
			pageCount = dbCount / pageSize + 1;
		}

		// 요청 페이지 계산
		if (rpage != null) {
			reqPage = Integer.parseInt(rpage);
			startCount = (reqPage - 1) * pageSize + 1;
			endCount = reqPage * pageSize;
		} else { // 가장 처음 페이지 즉, 1번페이지가 나온다.
			reqPage = 1; 
			startCount = 1;
			endCount = 6;
		}

		ArrayList<VetVO> list = vetDao.getResultList(startCount, endCount);
		
	

		mv.addObject("list", list);
		mv.addObject("dbCount", dbCount);
		mv.addObject("rpage", reqPage);
		mv.addObject("pageSize", pageSize);
	
		mv.setViewName("/admin/admin_dog_vet.none");

		return mv;
	}
	@RequestMapping(value = "/admin_dog_vet_write.do", method = RequestMethod.GET)
	public String admin_dog_vet_write() {
		return "admin/admin_dog_vet_write.none";
	}
	@RequestMapping(value = "/admin_dog_vet_write_proc.do", method = RequestMethod.POST)
	public String admin_dog_vet_write_proc(VetVO vo,HttpServletRequest request) throws Exception{
		String root_path = "";
		String attach_path = "";
		String tip_mainimgs = "";
	
		
		if(vo.getTip_cmainimg().getOriginalFilename() != "" && vo.getTip_cmainimg().getOriginalFilename() != null) {
			//nfile,nsfile 생성
			root_path = request.getSession().getServletContext().getRealPath("/");
			attach_path = "\\resources\\upload\\";
			
			//중복방지 처리
			UUID uuid = UUID.randomUUID();
			String tip_mainimg = vo.getTip_cmainimg().getOriginalFilename();
			tip_mainimgs = uuid+"_"+vo.getTip_cmainimg().getOriginalFilename();
			
			System.out.println("tip_mainimg="+tip_mainimg);
			System.out.println("tip_mainimgs="+tip_mainimgs);
			System.out.println("tip_content="+vo.getTip_content());
			
			//db연동을 위한 파일명set
			vo.setTip_mainimg(tip_mainimg);
			vo.setTip_mainimgs(tip_mainimgs);
			
		}else {
			vo.setTip_mainimg("");
			vo.setTip_mainimgs("");
		}
		
		boolean result =  vetDao.getResultWrite2(vo);
		String respage="";
		
		if(result){
			if(vo.getTip_cmainimg().getOriginalFilename() != null && vo.getTip_cmainimg().getOriginalFilename() !="") {
				//upload 폴더에 저장
			
				String upload_path = root_path + attach_path + tip_mainimgs;
				
				File file = new File(upload_path);	// 파일경로/파일명
				vo.getTip_cmainimg().transferTo(file);
			}
			
			respage = "redirect:/admin_dog_vet.do";
		}else{
			respage = "errorPage";
		}
		
		return respage;
	}
	@RequestMapping(value = "/admin_dog_vet_content.do", method = RequestMethod.GET)
	public ModelAndView admin_dog_vet_content(String tip_id,String page) {
		ModelAndView mv = new ModelAndView();
		
		VetVO vo =vetDao.getResultContent(tip_id);
		
		if(vo.getTip_maintitle() != null && vo.getTip_maintitle() != ""){
		
			
			if(vo.getTip_content() != null && vo.getTip_content() != ""){
				vo.setTip_content(vo.getTip_content().replace("\r\n", "<br>"));
			
				
			
				mv.addObject("vo",vo);
				mv.addObject("rpage",page);
				mv.setViewName("/admin/admin_dog_vet_content.none");
			}else{
				vo.setTip_content("");
			}
			
		}else{
			mv.setViewName("errorPage");
		}
		return mv;
	}
	@RequestMapping(value="/admin_dog_vet_update_proc.do", method=RequestMethod.POST)
	public ModelAndView admin_dog_vet_update_proc(VetVO vo, HttpServletRequest request, String del_tip_mainimgs) throws Exception {
		//System.out.println("del_bsfile="+del_bsfile);
		ModelAndView mv = new ModelAndView();
		
		//BoardCheckService board = new BoardCheckService();
		boolean result = false;
		
		if(vo.getTip_cmainimg().getOriginalFilename() != "" && vo.getTip_cmainimg().getOriginalFilename() != null) {
			System.out.println("파일있음");
			
			//bfile,bsfile 생성
			String root_path = request.getSession().getServletContext().getRealPath("/");
			String attach_path = "\\resources\\upload\\";
			
			//중복방지 처리
			UUID uuid = UUID.randomUUID();
			String mainimg = vo.getTip_cmainimg().getOriginalFilename();
			String mainimgs = uuid +"_"+vo.getTip_cmainimg().getOriginalFilename();
			
			//System.out.println("ubfile="+bfile);
			//System.out.println("ubsfile"+bsfile);
			
			//db연동을 위한 파일명 set
			vo.setTip_mainimg(mainimg);
			vo.setTip_mainimgs(mainimgs);
			result = vetDao.getResultUpdate(vo);
			
			if(result) {
				
				//upload 폴더에 파일 저장
				String upload_path = root_path + attach_path +mainimgs;
				
				File file = new File(upload_path);	// 파일경로/파일명
				vo.getTip_cmainimg().transferTo(file);
				
				//기존 파일 삭제
				if(del_tip_mainimgs != null && del_tip_mainimgs != "") {
					String del_path = root_path + attach_path + del_tip_mainimgs;
					File delFile = new File(del_path);
					if(delFile.exists()) {
						delFile.delete();
					}
				}
			}
		}else {
			System.out.println("파일없음");
			result = vetDao.getResultUpdateNofile(vo);	//타이틀, 내용업데이트
		}
		//if(result) mv.setViewName("/board/board_list"); -------------> 이렇게 자주 하는데 null포인트가 뜬다 board.do부분 
		// 컨트롤러에서 만든 arraylist같은것이 실행이 안되서 
		// 그렇다 그래서 다시 board.do부분 컨트롤러를 호출해야된다
		if(result) mv.setViewName("redirect:/admin_dog_vet.do");
		
		return mv;
	}
	@RequestMapping(value = "/admin_dog_vet_delete.do", method = RequestMethod.GET)
	public ModelAndView admin_dog_vet_delete(String tip_id) {
		ModelAndView mv = new ModelAndView();
		
		mv.addObject("tip_id",tip_id);
		mv.setViewName("/admin/admin_dog_vet_delete.none");
		
		return mv;
	}
	
	/**
	 * title : 삭제완료 처리
	 */
	@RequestMapping(value="/admin_dog_vet_delete_proc.do", method=RequestMethod.GET)
	public ModelAndView admin_dog_vet_delete_proc(String tip_id, HttpServletRequest request) {
		
		ModelAndView mv = new ModelAndView();

		boolean result = vetDao.getResultDelete(tip_id,request);
	
		
		if(result){
			mv.setViewName("redirect:/admin_dog_vet.do");
		}else{
			mv.setViewName("errorPage");
		}
		
		return mv;
	}
	
	
	
	@RequestMapping(value = "/admin_cat_vet.do", method = RequestMethod.GET)
	public ModelAndView admin_cat_vet(String rpage) {
		ModelAndView mv = new ModelAndView();

		// 페이징 처리 - startCount, endCount 구하기
		int startCount = 0;
		int endCount = 0;
		int pageSize = 6; // 한페이지당 게시물 수
		int reqPage = 0; // 요청페이지
		int pageCount = 1; // 전체 페이지 수
		int dbCount = vetDao.execTotalCount2(); // DB에서 가져온 전체 행수
		
		// 총 페이지 수 계산
		if (dbCount % pageSize == 0) {
			pageCount = dbCount / pageSize;
		} else {
			pageCount = dbCount / pageSize + 1;
		}

		// 요청 페이지 계산
		if (rpage != null) {
			reqPage = Integer.parseInt(rpage);
			startCount = (reqPage - 1) * pageSize + 1;
			endCount = reqPage * pageSize;
		} else { // 가장 처음 페이지 즉, 1번페이지가 나온다.
			reqPage = 1; 
			startCount = 1;
			endCount = 6;
		}

		ArrayList<VetVO> list = vetDao.getResultList2(startCount, endCount);
		
	

		mv.addObject("list", list);
		mv.addObject("dbCount", dbCount);
		mv.addObject("rpage", reqPage);
		mv.addObject("pageSize", pageSize);
	
		mv.setViewName("/admin/admin_cat_vet.none");

		return mv;
	}
	@RequestMapping(value = "/admin_cat_vet_write.do", method = RequestMethod.GET)
	public String admin_cat_vet_write() {
		return "admin/admin_cat_vet_write.none";
	}
	@RequestMapping(value = "/admin_cat_vet_write_proc.do", method = RequestMethod.POST)
	public String admin_cat_vet_write_proc(VetVO vo,HttpServletRequest request) throws Exception{
		String root_path = "";
		String attach_path = "";
		String tip_mainimgs = "";
	
		
		if(vo.getTip_cmainimg().getOriginalFilename() != "" && vo.getTip_cmainimg().getOriginalFilename() != null) {
			//nfile,nsfile 생성
			root_path = request.getSession().getServletContext().getRealPath("/");
			attach_path = "\\resources\\upload\\";
			
			//중복방지 처리
			UUID uuid = UUID.randomUUID();
			String tip_mainimg = vo.getTip_cmainimg().getOriginalFilename();
			tip_mainimgs = uuid+"_"+vo.getTip_cmainimg().getOriginalFilename();
			
			System.out.println("tip_mainimg="+tip_mainimg);
			System.out.println("tip_mainimgs="+tip_mainimgs);
			System.out.println("tip_content="+vo.getTip_content());
			
			//db연동을 위한 파일명set
			vo.setTip_mainimg(tip_mainimg);
			vo.setTip_mainimgs(tip_mainimgs);
			
		}else {
			vo.setTip_mainimg("");
			vo.setTip_mainimgs("");
		}
		
		boolean result =  vetDao.getResultWrite(vo);
		String respage="";
		
		if(result){
			if(vo.getTip_cmainimg().getOriginalFilename() != null && vo.getTip_cmainimg().getOriginalFilename() !="") {
				//upload 폴더에 저장
			
				String upload_path = root_path + attach_path + tip_mainimgs;
				
				File file = new File(upload_path);	// 파일경로/파일명
				vo.getTip_cmainimg().transferTo(file);
			}
			
			respage = "redirect:/admin_cat_vet.do";
		}else{
			respage = "errorPage";
		}
		
		return respage;
	}
	
	
	
	@RequestMapping(value = "/admin_cat_vet_content.do", method = RequestMethod.GET)
	public ModelAndView admin_cat_vet_content(String tip_id,String page) {
		ModelAndView mv = new ModelAndView();
		
		VetVO vo =vetDao.getResultContent(tip_id);
		
		if(vo.getTip_maintitle() != null && vo.getTip_maintitle() != ""){
		
			
			if(vo.getTip_content() != null && vo.getTip_content() != ""){
				vo.setTip_content(vo.getTip_content().replace("\r\n", "<br>"));
			
				
			
				mv.addObject("vo",vo);
				mv.addObject("rpage",page);
				mv.setViewName("/admin/admin_cat_vet_content.none");
			}else{
				vo.setTip_content("");
			}
			
		}else{
			mv.setViewName("errorPage");
		}
		return mv;
	}
	@RequestMapping(value="/admin_cat_vet_update_proc.do", method=RequestMethod.POST)
	public ModelAndView admin_cat_vet_update_proc(VetVO vo, HttpServletRequest request, String del_tip_mainimgs) throws Exception {
		//System.out.println("del_bsfile="+del_bsfile);
		ModelAndView mv = new ModelAndView();
		
		//BoardCheckService board = new BoardCheckService();
		boolean result = false;
		
		if(vo.getTip_cmainimg().getOriginalFilename() != "" && vo.getTip_cmainimg().getOriginalFilename() != null) {
			System.out.println("파일있음");
			
			//bfile,bsfile 생성
			String root_path = request.getSession().getServletContext().getRealPath("/");
			String attach_path = "\\resources\\upload\\";
			
			//중복방지 처리
			UUID uuid = UUID.randomUUID();
			String mainimg = vo.getTip_cmainimg().getOriginalFilename();
			String mainimgs = uuid +"_"+vo.getTip_cmainimg().getOriginalFilename();
			
			//System.out.println("ubfile="+bfile);
			//System.out.println("ubsfile"+bsfile);
			
			//db연동을 위한 파일명 set
			vo.setTip_mainimg(mainimg);
			vo.setTip_mainimgs(mainimgs);
			result = vetDao.getResultUpdate(vo);
			
			if(result) {
				
				//upload 폴더에 파일 저장
				String upload_path = root_path + attach_path +mainimgs;
				
				File file = new File(upload_path);	// 파일경로/파일명
				vo.getTip_cmainimg().transferTo(file);
				
				//기존 파일 삭제
				if(del_tip_mainimgs != null && del_tip_mainimgs != "") {
					String del_path = root_path + attach_path + del_tip_mainimgs;
					File delFile = new File(del_path);
					if(delFile.exists()) {
						delFile.delete();
					}
				}
			}
		}else {
			System.out.println("파일없음");
			result = vetDao.getResultUpdateNofile(vo);	//타이틀, 내용업데이트
		}
		//if(result) mv.setViewName("/board/board_list"); -------------> 이렇게 자주 하는데 null포인트가 뜬다 board.do부분 
		// 컨트롤러에서 만든 arraylist같은것이 실행이 안되서 
		// 그렇다 그래서 다시 board.do부분 컨트롤러를 호출해야된다
		if(result) mv.setViewName("redirect:/admin_cat_vet.do");
		
		return mv;
	}
	
	

	@RequestMapping(value = "/admin_cat_vet_delete.do", method = RequestMethod.GET)
	public ModelAndView admin_cat_vet_delete(String tip_id) {
		ModelAndView mv = new ModelAndView();
		
		mv.addObject("tip_id",tip_id);
		mv.setViewName("/admin/admin_cat_vet_delete.none");
		
		return mv;
	}
	
	/**
	 * title : 삭제완료 처리
	 */
	@RequestMapping(value="/admin_cat_vet_delete_proc.do", method=RequestMethod.GET)
	public ModelAndView admin_cat_vet_delete_proc(String tip_id, HttpServletRequest request) {
		
		ModelAndView mv = new ModelAndView();

		boolean result = vetDao.getResultDelete(tip_id,request);
	
		
		if(result){
			mv.setViewName("redirect:/admin_cat_vet.do");
		}else{
			mv.setViewName("errorPage");
		}
		
		return mv;
	}
	
	
	

}
